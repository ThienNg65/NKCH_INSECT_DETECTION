// Mocks generated by Mockito 5.4.2 from annotations
// in insect_dection_app/test/helpers/auth/auth_domain.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:insect_dection_app/core/core.dart' as _i5;
import 'package:insect_dection_app/features/auth/auth.dart' as _i3;
import 'package:insect_dection_app/features/user/user.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthRepository_1 extends _i1.SmartFake
    implements _i3.AuthRepository {
  _FakeAuthRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.Either<_i5.Failure, _i6.AuthUserInfo>> get userInfoState =>
      (super.noSuchMethod(
        Invocation.getter(#userInfoState),
        returnValue:
            _i4.Stream<_i2.Either<_i5.Failure, _i6.AuthUserInfo>>.empty(),
      ) as _i4.Stream<_i2.Either<_i5.Failure, _i6.AuthUserInfo>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.LoginSuccessEntity>> logIn(
          _i3.AuthenticationParams? loginParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #logIn,
          [loginParams],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i3.LoginSuccessEntity>>.value(
                _FakeEither_0<_i5.Failure, _i3.LoginSuccessEntity>(
          this,
          Invocation.method(
            #logIn,
            [loginParams],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.LoginSuccessEntity>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.SignUpSuccessEntity>> signUp(
          _i3.AuthenticationParams? signUpParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [signUpParams],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i3.SignUpSuccessEntity>>.value(
                _FakeEither_0<_i5.Failure, _i3.SignUpSuccessEntity>(
          this,
          Invocation.method(
            #signUp,
            [signUpParams],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.SignUpSuccessEntity>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #logOut,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [AuthRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRemoteDatasource extends _i1.Mock
    implements _i3.AuthRemoteDatasource {
  MockAuthRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i6.AuthUserInfo?> get getUserInfoState => (super.noSuchMethod(
        Invocation.getter(#getUserInfoState),
        returnValue: _i4.Stream<_i6.AuthUserInfo?>.empty(),
      ) as _i4.Stream<_i6.AuthUserInfo?>);
  @override
  _i4.Future<_i3.SignUpResponse>? signUp(
          _i3.AuthenticationParams? signUpParams) =>
      (super.noSuchMethod(Invocation.method(
        #signUp,
        [signUpParams],
      )) as _i4.Future<_i3.SignUpResponse>?);
  @override
  _i4.Future<_i3.LoginResponse?> logIn(_i3.AuthenticationParams? loginParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #logIn,
          [loginParams],
        ),
        returnValue: _i4.Future<_i3.LoginResponse?>.value(),
      ) as _i4.Future<_i3.LoginResponse?>);
  @override
  _i4.Future<void> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [GetCurrentAuthUserInfoStream].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCurrentAuthUserInfoStream extends _i1.Mock
    implements _i3.GetCurrentAuthUserInfoStream {
  MockGetCurrentAuthUserInfoStream() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepository get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeAuthRepository_1(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i3.AuthRepository);
  @override
  _i4.Stream<_i2.Either<_i5.Failure, _i6.AuthUserInfo>> call(
          _i5.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Stream<_i2.Either<_i5.Failure, _i6.AuthUserInfo>>.empty(),
      ) as _i4.Stream<_i2.Either<_i5.Failure, _i6.AuthUserInfo>>);
}

/// A class which mocks [EmailLogin].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmailLogin extends _i1.Mock implements _i3.EmailLogin {
  MockEmailLogin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.LoginSuccessEntity>> call(
          _i3.AuthenticationParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i3.LoginSuccessEntity>>.value(
                _FakeEither_0<_i5.Failure, _i3.LoginSuccessEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.LoginSuccessEntity>>);
}

/// A class which mocks [EmailSignUp].
///
/// See the documentation for Mockito's code generation for more information.
class MockEmailSignUp extends _i1.Mock implements _i3.EmailSignUp {
  MockEmailSignUp() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.SignUpSuccessEntity>> call(
          _i3.AuthenticationParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i3.SignUpSuccessEntity>>.value(
                _FakeEither_0<_i5.Failure, _i3.SignUpSuccessEntity>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.SignUpSuccessEntity>>);
}

/// A class which mocks [LogOutRequested].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogOutRequested extends _i1.Mock implements _i3.LogOutRequested {
  MockLogOutRequested() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepository get repo => (super.noSuchMethod(
        Invocation.getter(#repo),
        returnValue: _FakeAuthRepository_1(
          this,
          Invocation.getter(#repo),
        ),
      ) as _i3.AuthRepository);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>?> call(dynamic params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>?>.value(),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>?>);
}
