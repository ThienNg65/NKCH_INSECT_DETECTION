// Mocks generated by Mockito 5.4.2 from annotations
// in insect_dection_app/test/helpers/insects/insect_domain.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:insect_dection_app/core/core.dart' as _i5;
import 'package:insect_dection_app/features/insect/insect.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [InsectRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockInsectRepository extends _i1.Mock implements _i3.InsectRepository {
  MockInsectRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>> getInsectByModelId(
          String? modelId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInsectByModelId,
          [modelId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>.value(
            _FakeEither_0<_i5.Failure, _i3.Insect>(
          this,
          Invocation.method(
            #getInsectByModelId,
            [modelId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>> getInsectByKeyword(
          _i3.InsectListFilterParams? insectListFilterParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInsectByKeyword,
          [insectListFilterParams],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>.value(
            _FakeEither_0<_i5.Failure, _i3.InsectList>(
          this,
          Invocation.method(
            #getInsectByKeyword,
            [insectListFilterParams],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>> getInitialInsectList(
          _i3.InsectListParams? insectListParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInitialInsectList,
          [insectListParams],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>.value(
            _FakeEither_0<_i5.Failure, _i3.InsectList>(
          this,
          Invocation.method(
            #getInitialInsectList,
            [insectListParams],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>> getMoreInsectList(
          _i3.InsectListParams? insectListParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoreInsectList,
          [insectListParams],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>.value(
            _FakeEither_0<_i5.Failure, _i3.InsectList>(
          this,
          Invocation.method(
            #getMoreInsectList,
            [insectListParams],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>> getInsectsByTaxnomyRank(
          _i3.InsectListFilterParams? insectListFilterParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInsectsByTaxnomyRank,
          [insectListFilterParams],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>.value(
            _FakeEither_0<_i5.Failure, _i3.InsectList>(
          this,
          Invocation.method(
            #getInsectsByTaxnomyRank,
            [insectListFilterParams],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>);
}

/// A class which mocks [UserInsectDataRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInsectDataRepository extends _i1.Mock
    implements _i3.UserInsectDataRepository {
  MockUserInsectDataRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>> addRecentlySearchInsect(
    _i5.UserBucketParams? userBucketParams,
    _i3.InsectParams? insectParams,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addRecentlySearchInsect,
          [
            userBucketParams,
            insectParams,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>.value(
            _FakeEither_0<_i5.Failure, _i3.Insect>(
          this,
          Invocation.method(
            #addRecentlySearchInsect,
            [
              userBucketParams,
              insectParams,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>
      getRecentlySearchInsectList(
    _i5.UserBucketParams? userBucketParams,
    _i3.InsectListParams? insectListParams,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #getRecentlySearchInsectList,
              [
                userBucketParams,
                insectListParams,
              ],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>.value(
                    _FakeEither_0<_i5.Failure, _i3.InsectList>(
              this,
              Invocation.method(
                #getRecentlySearchInsectList,
                [
                  userBucketParams,
                  insectListParams,
                ],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> isBookmarkedInsect(
    _i5.UserBucketParams? userBucketParams,
    String? modelId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isBookmarkedInsect,
          [
            userBucketParams,
            modelId,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #isBookmarkedInsect,
            [
              userBucketParams,
              modelId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>> addBookmarkedInsect(
    _i5.UserBucketParams? userBucketParams,
    _i3.InsectParams? insectParams,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBookmarkedInsect,
          [
            userBucketParams,
            insectParams,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>.value(
            _FakeEither_0<_i5.Failure, _i3.Insect>(
          this,
          Invocation.method(
            #addBookmarkedInsect,
            [
              userBucketParams,
              insectParams,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>> removeBookmarkedInsect(
    _i5.UserBucketParams? userBucketParams,
    _i3.InsectParams? insectParams,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeBookmarkedInsect,
          [
            userBucketParams,
            insectParams,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>.value(
            _FakeEither_0<_i5.Failure, _i3.Insect>(
          this,
          Invocation.method(
            #removeBookmarkedInsect,
            [
              userBucketParams,
              insectParams,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>> getBookmarkedInsectList(
          _i5.UserBucketParams? userBucketParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBookmarkedInsectList,
          [userBucketParams],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>.value(
            _FakeEither_0<_i5.Failure, _i3.InsectList>(
          this,
          Invocation.method(
            #getBookmarkedInsectList,
            [userBucketParams],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>);
}

/// A class which mocks [InsectRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockInsectRemoteDatasource extends _i1.Mock
    implements _i3.InsectRemoteDatasource {
  MockInsectRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectModel>> getInsectByModelId(
          String? modelId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInsectByModelId,
          [modelId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.InsectModel>>.value(
            _FakeEither_0<_i5.Failure, _i3.InsectModel>(
          this,
          Invocation.method(
            #getInsectByModelId,
            [modelId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>> getInsectByKeyword(
          _i3.InsectListFilterParams? insectListFilterParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInsectByKeyword,
          [insectListFilterParams],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>>.value(
                _FakeEither_0<_i5.Failure, _i3.InsectListModel>(
          this,
          Invocation.method(
            #getInsectByKeyword,
            [insectListFilterParams],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>> getInitialInsectList(
          _i3.InsectListParams? insectListParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #getInitialInsectList,
          [insectListParams],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>>.value(
                _FakeEither_0<_i5.Failure, _i3.InsectListModel>(
          this,
          Invocation.method(
            #getInitialInsectList,
            [insectListParams],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>> getMoreInsectList(
          _i3.InsectListParams? insectListParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoreInsectList,
          [insectListParams],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>>.value(
                _FakeEither_0<_i5.Failure, _i3.InsectListModel>(
          this,
          Invocation.method(
            #getMoreInsectList,
            [insectListParams],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>>
      getInsectsByTaxnomyRank(
              _i3.InsectListFilterParams? insectListFilterParams) =>
          (super.noSuchMethod(
            Invocation.method(
              #getInsectsByTaxnomyRank,
              [insectListFilterParams],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>>.value(
                    _FakeEither_0<_i5.Failure, _i3.InsectListModel>(
              this,
              Invocation.method(
                #getInsectsByTaxnomyRank,
                [insectListFilterParams],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>>);
}

/// A class which mocks [UserInsectRemoteDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInsectRemoteDatasource extends _i1.Mock
    implements _i3.UserInsectRemoteDatasource {
  MockUserInsectRemoteDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectModel>> addRecentlySearchInsect(
    _i5.UserBucketParams? userBucketParams,
    _i3.InsectParams? insectParams,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addRecentlySearchInsect,
          [
            userBucketParams,
            insectParams,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.InsectModel>>.value(
            _FakeEither_0<_i5.Failure, _i3.InsectModel>(
          this,
          Invocation.method(
            #addRecentlySearchInsect,
            [
              userBucketParams,
              insectParams,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>>
      getRecentlySearchInsectList(
    _i5.UserBucketParams? userBucketParams,
    _i3.InsectListParams? insectListParams,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #getRecentlySearchInsectList,
              [
                userBucketParams,
                insectListParams,
              ],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>>.value(
                    _FakeEither_0<_i5.Failure, _i3.InsectListModel>(
              this,
              Invocation.method(
                #getRecentlySearchInsectList,
                [
                  userBucketParams,
                  insectListParams,
                ],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> isBookmarkedInsect(
    _i5.UserBucketParams? userBucketParams,
    String? modelId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #isBookmarkedInsect,
          [
            userBucketParams,
            modelId,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #isBookmarkedInsect,
            [
              userBucketParams,
              modelId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectModel>> addBookmarkedInsect(
    _i5.UserBucketParams? userBucketParams,
    _i3.InsectParams? insectParams,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBookmarkedInsect,
          [
            userBucketParams,
            insectParams,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.InsectModel>>.value(
            _FakeEither_0<_i5.Failure, _i3.InsectModel>(
          this,
          Invocation.method(
            #addBookmarkedInsect,
            [
              userBucketParams,
              insectParams,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectModel>> removeBookmarkedInsect(
    _i5.UserBucketParams? userBucketParams,
    _i3.InsectParams? insectParams,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeBookmarkedInsect,
          [
            userBucketParams,
            insectParams,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.InsectModel>>.value(
            _FakeEither_0<_i5.Failure, _i3.InsectModel>(
          this,
          Invocation.method(
            #removeBookmarkedInsect,
            [
              userBucketParams,
              insectParams,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectModel>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>>
      getBookmarkedInsectList(_i5.UserBucketParams? userBucketParams) =>
          (super.noSuchMethod(
            Invocation.method(
              #getBookmarkedInsectList,
              [userBucketParams],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>>.value(
                    _FakeEither_0<_i5.Failure, _i3.InsectListModel>(
              this,
              Invocation.method(
                #getBookmarkedInsectList,
                [userBucketParams],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectListModel>>);
}

/// A class which mocks [GetInsectByModelId].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetInsectByModelId extends _i1.Mock
    implements _i3.GetInsectByModelId {
  MockGetInsectByModelId() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>> call(String? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>.value(
            _FakeEither_0<_i5.Failure, _i3.Insect>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>);
}

/// A class which mocks [GetInitialInsectList].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetInitialInsectList extends _i1.Mock
    implements _i3.GetInitialInsectList {
  MockGetInitialInsectList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>> call(
          _i3.InsectListParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>.value(
            _FakeEither_0<_i5.Failure, _i3.InsectList>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>);
}

/// A class which mocks [GetMoreInsectList].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMoreInsectList extends _i1.Mock implements _i3.GetMoreInsectList {
  MockGetMoreInsectList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>> call(
          _i3.InsectListParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>.value(
            _FakeEither_0<_i5.Failure, _i3.InsectList>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>);
}

/// A class which mocks [AddRecentlySearchInsect].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddRecentlySearchInsect extends _i1.Mock
    implements _i3.AddRecentlySearchInsect {
  MockAddRecentlySearchInsect() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>> call(
    _i5.UserBucketParams? firstParam,
    _i3.InsectParams? secondParam,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            firstParam,
            secondParam,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>.value(
            _FakeEither_0<_i5.Failure, _i3.Insect>(
          this,
          Invocation.method(
            #call,
            [
              firstParam,
              secondParam,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>);
}

/// A class which mocks [GetRecentlySearchInsectList].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRecentlySearchInsectList extends _i1.Mock
    implements _i3.GetRecentlySearchInsectList {
  MockGetRecentlySearchInsectList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>?> call(
    _i5.UserBucketParams? firstParam,
    _i3.InsectListParams? secondParam,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            firstParam,
            secondParam,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>?>.value(),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>?>);
}

/// A class which mocks [AddBookmarkedInsect].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddBookmarkedInsect extends _i1.Mock
    implements _i3.AddBookmarkedInsect {
  MockAddBookmarkedInsect() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>> call(
    _i5.UserBucketParams? firstParam,
    _i3.InsectParams? secondParam,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            firstParam,
            secondParam,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>.value(
            _FakeEither_0<_i5.Failure, _i3.Insect>(
          this,
          Invocation.method(
            #call,
            [
              firstParam,
              secondParam,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>);
}

/// A class which mocks [GetInsectBookmarkedState].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetInsectBookmarkedState extends _i1.Mock
    implements _i3.GetInsectBookmarkedState {
  MockGetInsectBookmarkedState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> call(
    _i5.UserBucketParams? firstParam,
    String? secondParam,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            firstParam,
            secondParam,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [
              firstParam,
              secondParam,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}

/// A class which mocks [RemoveBookmarkedInsect].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveBookmarkedInsect extends _i1.Mock
    implements _i3.RemoveBookmarkedInsect {
  MockRemoveBookmarkedInsect() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>> call(
    _i5.UserBucketParams? firstParam,
    _i3.InsectParams? secondParam,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            firstParam,
            secondParam,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>.value(
            _FakeEither_0<_i5.Failure, _i3.Insect>(
          this,
          Invocation.method(
            #call,
            [
              firstParam,
              secondParam,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.Insect>>);
}

/// A class which mocks [GetBookmarkedInsectList].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBookmarkedInsectList extends _i1.Mock
    implements _i3.GetBookmarkedInsectList {
  MockGetBookmarkedInsectList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>> call(
          _i5.UserBucketParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>.value(
            _FakeEither_0<_i5.Failure, _i3.InsectList>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i3.InsectList>>);
}
